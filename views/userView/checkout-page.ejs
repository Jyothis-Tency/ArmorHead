<%- include("../partials/userHeader") %>
<main>
  <!-- checkout-breadcrumb -->
  <section
    style="
      background-image: url('/user-assets/img/bg/page-title.png');
      height: 150px;
      padding: 20px 0;
    "
  >
    <div style="max-width: 1200px; margin: 0 auto">
      <div
        style="
          display: flex;
          justify-content: center;
          align-items: center;
          text-align: center;
        "
      >
        <div>
          <h1 style="font-size: 70px; color: #333">Checkout</h1>
          <ul
            style="
              list-style: none;
              padding: 0;
              display: flex;
              justify-content: center;
            "
          >
            <li style="margin-right: 10px">
              <a href="/" style="text-decoration: none; color: #007bff">Home</a>
            </li>
            <li style="color: #666">Checkout</li>
          </ul>
        </div>
      </div>
    </div>
  </section>
  <!-- end-checkout-breadcrumb -->

  <!-- checkout-area start -->
  <section class="checkout-area pb-70" style="padding-top: 10px">
    <div class="container">
      <form action="/place-order" method="post">
        <div class="row">
          <div class="col-lg-6">
            <div class="checkbox-form">
              <h3>Address Details</h3>
              <div class="accordion" id="addressAccordion">
                <% allAddress.forEach((address, index) => { %>
                <div class="card">
                  <div class="card-header" id="heading<%= index %>">
                    <h5 class="mb-0">
                      <button
                        class="btn btn-link"
                        type="button"
                        data-toggle="collapse"
                        data-target="#collapse<%= index %>"
                        aria-expanded="true"
                        aria-controls="collapse<%= index %>"
                      >
                        <%= address.firstName %> <%= address.lastName %>
                      </button>
                    </h5>
                    <div class="select-address">
                      <input
                        type="radio"
                        id="selectAddress<%= address._id %>"
                        name="selectAddress"
                        value="<%= address._id %>"
                      />
                      <label for="selectAddress<%= address._id %>"
                        >Select This Address</label
                      >
                    </div>
                  </div>

                  <div
                    id="collapse<%= index %>"
                    class="collapse"
                    aria-labelledby="heading<%= index %>"
                    data-parent="#addressAccordion"
                  >
                    <div class="card-body">
                      <form class="edit-address-form">
                        <div class="checkout-form-list">
                          <label
                            >First Name<span class="required">*</span></label
                          >
                          <input
                            type="text"
                            name="firstName"
                            value="<%= address.firstName %>"
                            disabled
                          />
                        </div>
                        <div class="checkout-form-list">
                          <label
                            >Last Name<span class="required">*</span></label
                          >
                          <input
                            type="text"
                            name="lastName"
                            value="<%= address.lastName %>"
                            disabled
                          />
                        </div>
                        <div class="checkout-form-list">
                          <label
                            >House / Flat<span class="required">*</span></label
                          >
                          <input
                            type="text"
                            name="house"
                            value="<%= address.house %>"
                            disabled
                          />
                        </div>
                        <div class="checkout-form-list">
                          <label>Locality<span class="required">*</span></label>
                          <input
                            type="text"
                            name="locality"
                            value="<%= address.locality %>"
                            disabled
                          />
                        </div>
                        <div class="checkout-form-list">
                          <label>City<span class="required">*</span></label>
                          <input
                            type="text"
                            name="city"
                            value="<%= address.city %>"
                            disabled
                          />
                        </div>
                        <div class="checkout-form-list">
                          <label>State<span class="required">*</span></label>
                          <input
                            type="text"
                            name="state"
                            value="<%= address.state %>"
                            disabled
                          />
                        </div>
                        <div class="checkout-form-list">
                          <label>Pincode<span class="required">*</span></label>
                          <input
                            type="text"
                            name="pincode"
                            value="<%= address.pincode %>"
                            disabled
                          />
                        </div>
                        <div class="checkout-form-list">
                          <label
                            >Email Address<span class="required">*</span></label
                          >
                          <input
                            type="email"
                            name="email"
                            value="<%= address.email %>"
                            disabled
                          />
                        </div>
                        <div class="checkout-form-list">
                          <label>Phone<span class="required">*</span></label>
                          <input
                            type="text"
                            name="phone"
                            value="<%= address.phone %>"
                            disabled
                          />
                        </div>
                        <button
                          type="button"
                          class="btn btn-secondary edit-button"
                          onclick="enableEdit(this)"
                        >
                          Edit
                        </button>
                        <button
                          type="button"
                          class="btn btn-primary confirm-edit-button"
                          style="display: none"
                          onclick="confirmEdit(this,'<%= address._id %>')"
                        >
                          Confirm Edit
                        </button>
                        <button
                          type="button"
                          class="btn btn-danger cancel-edit-button"
                          style="display: none"
                          onclick="cancelEdit(this)"
                        >
                          Cancel Edit
                        </button>
                      </form>
                    </div>
                  </div>
                </div>
                <% }); %>
              </div>
              <div class="card">
                <div class="card-header" id="newAddressHeading">
                  <h5 class="mb-0">
                    <button
                      class="btn btn-link"
                      type="button"
                      data-toggle="collapse"
                      data-target="#collapseNewAddress"
                      aria-expanded="true"
                      aria-controls="collapseNewAddress"
                    >
                      Add New Address
                    </button>
                  </h5>
                </div>
                <div
                  id="collapseNewAddress"
                  class="collapse"
                  aria-labelledby="newAddressHeading"
                  data-parent="#addressAccordion"
                >
                  <div class="card-body">
                    <!-- New address form -->
                    <form id="addAddressForm">
                      <div class="form-group">
                        <label for="firstName"
                          >First Name<span class="required">*</span></label
                        >
                        <input
                          type="text"
                          class="form-control"
                          id="firstName"
                          name="firstName"
                          required
                        />
                      </div>
                      <div class="form-group">
                        <label for="lastName"
                          >Last Name<span class="required">*</span></label
                        >
                        <input
                          type="text"
                          class="form-control"
                          id="lastName"
                          name="lastName"
                          required
                        />
                      </div>
                      <div class="form-group">
                        <label for="house"
                          >House / Flat<span class="required">*</span></label
                        >
                        <input
                          type="text"
                          class="form-control"
                          id="house"
                          name="house"
                          required
                        />
                      </div>
                      <div class="form-group">
                        <label for="locality"
                          >Locality<span class="required">*</span></label
                        >
                        <input
                          type="text"
                          class="form-control"
                          id="locality"
                          name="locality"
                          required
                        />
                      </div>
                      <div class="form-group">
                        <label for="city"
                          >City<span class="required">*</span></label
                        >
                        <input
                          type="text"
                          class="form-control"
                          id="city"
                          name="city"
                          required
                        />
                      </div>
                      <div class="form-group">
                        <label for="state"
                          >State<span class="required">*</span></label
                        >
                        <input
                          type="text"
                          class="form-control"
                          id="state"
                          name="state"
                          required
                        />
                      </div>
                      <div class="form-group">
                        <label for="pincode"
                          >Pincode<span class="required">*</span></label
                        >
                        <input
                          type="text"
                          class="form-control"
                          id="pincode"
                          name="pincode"
                          required
                        />
                      </div>
                      <div class="form-group">
                        <label for="country"
                          >Country<span class="required">*</span></label
                        >
                        <input
                          type="text"
                          class="form-control"
                          id="country"
                          name="country"
                          required
                        />
                      </div>
                      <div class="form-group">
                        <label for="email"
                          >Email Address<span class="required">*</span></label
                        >
                        <input
                          type="email"
                          class="form-control"
                          id="email"
                          name="email"
                          required
                        />
                      </div>
                      <div class="form-group">
                        <label for="phone"
                          >Phone<span class="required">*</span></label
                        >
                        <input
                          type="text"
                          class="form-control"
                          id="phone"
                          name="phone"
                          required
                        />
                      </div>
                      <button
                        type="submit"
                        class="btn btn-primary"
                        onclick="addNewAddress(event)"
                      >
                        Add Address
                      </button>
                    </form>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="col-lg-6">
            <div class="your-order mb-30">
              <h3>Your order</h3>
              <div class="your-order-table table-responsive">
                <% if (cartItems.length > 0) { %>
                <table>
                  <thead>
                    <tr>
                      <th class="product-name">Product</th>
                      <th class="product-size">Size</th>
                      <th class="product-total">Total</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% for (let cartItem of cartItems) { %>
                    <tr class="cart_item">
                      <td class="product-name">
                        <%= cartItem.product.productName %> ×
                        <strong class="product-quantity"
                          ><%= cartItem.quantity %></strong
                        >
                      </td>
                      <td class="product-size"><%= cartItem.size %></td>
                      <td class="product-total">
                        ₹<%= cartItem.product.salePrice * cartItem.quantity %>
                      </td>
                    </tr>
                    <% } %>
                  </tbody>
                  <tfoot>
                    <!-- <tr class="shipping">
                      <th>Shipping Charge</th>
                      <td colspan="2">
                        <ul>
                          <li><label>₹70</label></li>
                        </ul>
                      </td>
                    </tr> -->
                    <tr class="order_total">
                      <th>Order Total</th>
                      <td>
                        <div class="cart_subtotal" id="totalAmount">
                          <span>Total</span>
                          <p class="cart_amount">₹<%= totalAmount %></p>
                        </div>
                      </td>
                    </tr>
                  </tfoot>
                </table>
                <!--coupon code area start-->

                <div class="coupon_code left">
                  <h3>Coupon</h3>
                  <div class="coupon_inner">
                    <div class="coupon-dropdown" style="height: 40px">
                      <select
                        id="couponSelect"
                        class="coupon-select"
                        style="height: 100%"
                      >
                        <option value="">Select a coupon</option>
                        <% availableCoupons.forEach(function(coupon) { %>
                        <option
                          value="<%= coupon.couponCode %>"
                          data-discount="<%= coupon.discount %>"
                        >
                          <%= coupon.couponName %> - <%=
                          currencyFormat(coupon.discount) %> OFF <% if
                          (coupon.isActive==='Active' ) { %> (Expires: <%=
                          coupon.expiryDate.toLocaleDateString() %>) <% } else {
                          %> (Expired) <% } %>
                        </option>
                        <% }); %>
                      </select>
                    </div>
                    <button
                      id="couponButton"
                      type="button"
                      style="
                        background-color: red;
                        color: white;
                        padding: 10px 20px;
                        border: none;
                        border-radius: 5px;
                        cursor: pointer;
                        margin-top: 10px;
                      "
                    >
                      <% if (!couponApplied) { %>
                      <!-- If a coupon is applied, show Remove Coupon button -->
                      Apply Coupon <% } else { %>
                      <!-- If no coupon is applied, show Apply Coupon button -->
                      Remove Coupon <% } %>
                    </button>
                    <div id="couponMessage">
                      <div>
                        <span>
                          <% if (availableCoupons.length > 0) { %>
                          <span style="color: green">Coupon available!!!</span>
                          <% } else { %>
                          <span style="color: red"
                            >No coupons available!!!</span
                          >
                          <% } %>
                        </span>
                      </div>
                      <p></p>
                    </div>
                  </div>
                </div>

                <!--coupon code area end-->
                <% } else { %>
                <h4>No products added!!!</h4>
                <a
                  href="/shop"
                  style="
                    display: inline-block;
                    padding: 10px 20px;
                    background-color: red;
                    color: white;
                    text-decoration: none;
                    text-align: center;
                    border-radius: 5px;
                  "
                >
                  Go to Shop
                </a>
                <% } %>
              </div>

              <div class="payment-method">
                <div class="accordion" id="accordionExample">
                  <div class="card">
                    <div class="card-header" id="headingOne">
                      <h5 class="mb-0">
                        <input
                          type="radio"
                          id="payment_cod"
                          class="styled-checkbox"
                          name="payment_method"
                          value="Cash on Delivery"
                        />
                        <label for="payment_cod" class="checkbox-label"
                          >Cash on Delivery (COD)</label
                        >
                      </h5>
                    </div>

                    <div
                      id="collapseOne"
                      class="collapse show"
                      aria-labelledby="headingOne"
                      data-parent="#accordionExample"
                    >
                      <div class="card-body">
                        Pay with cash upon delivery of your order.
                      </div>
                    </div>
                  </div>
                </div>
                <div class="accordion" id="accordionExample">
                  <div class="card">
                    <div class="card-header" id="headingOne">
                      <h5 class="mb-0">
                        <input
                          type="radio"
                          id="payment_wallet"
                          class="styled-checkbox"
                          name="payment_method"
                          value="wallet"
                        />
                        <label for="payment_wallet" class="checkbox-label"
                          >Wallet
                          <span style="color: rgb(106, 204, 68)"
                            >(Available Wallet Amount : ₹<%=
                            walletDetails[0].walletBalance %>)</span
                          ></label
                        >
                      </h5>
                    </div>

                    <div
                      id="collapseOne"
                      class="collapse show"
                      aria-labelledby="headingOne"
                      data-parent="#accordionExample"
                    >
                      <div class="card-body">
                        Pay with cash using wallet money.
                      </div>
                    </div>
                  </div>
                </div>
                <div class="accordion" id="accordionExample">
                  <div class="card">
                    <div class="card-header" id="headingOne">
                      <h5 class="mb-0">
                        <input
                          type="radio"
                          id="payment_razorpay"
                          class="styled-checkbox"
                          name="payment_method"
                          value="razorpay"
                        />
                        <label for="payment_razorpay" class="checkbox-label"
                          >RazorPay</label
                        >
                      </h5>
                    </div>

                    <div
                      id="collapseOne"
                      class="collapse show"
                      aria-labelledby="headingOne"
                      data-parent="#accordionExample"
                    >
                      <div class="card-body">
                        Online payment using RazorPay.
                      </div>
                    </div>
                  </div>
                </div>
                <div class="order-button-payment mt-20">
                  <% if (cartItems.length > 0) { %>
                  <!-- Active 'Place order' button -->
                  <button type="submit" class="btn theme-btn">
                    Place order
                  </button>
                  <% } else { %>
                  <!-- Disabled 'Place order' button with grey color -->
                  <button
                    type="button"
                    class="btn"
                    disabled="true"
                    style="
                      background-color: grey; /* Change color to grey */
                      color: #ccc; /* Optional: Change text color to lighter grey
                    */
                    "
                  >
                    SORRY!!! Add products first
                  </button>
                  <% } %>
                </div>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>
  </section>
  <!-- checkout-area end -->
</main>

<%- include("../partials/userFooter") %>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Add event listener to the Apply/Remove Coupon button
    document
      .getElementById("couponButton")
      .addEventListener("click", function () {
        console.log("button clicked");
        var couponCode = document.getElementById("couponSelect").value;
        var button = document.getElementById("couponButton");
        var buttonLabel = button.textContent.trim();
        console.log("couponCode:", couponCode);
        console.log("buttonLabel:", buttonLabel);

        if (buttonLabel === "Apply Coupon") {
          // Send request to apply coupon
          applyCoupon(couponCode);
        } else {
          // Send request to remove coupon
          removeCoupon();
        }
      });
  });

  var totalPrice;

  async function applyCoupon(couponCode) {
    try {
      console.log("applyCoupon");
      const response = await fetch("/applyCoupon", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ couponCode: couponCode }),
      });
      if (response.ok) {
        const data = await response.json();
        console.log("data:", data);
        totalPrice = data.cart.totalPrice;

        Swal.fire({
          icon: "success",
          title: "Coupon Applied",
          text: data.message,
          showConfirmButton: false,
          timer: 1500,
        });
        console.log("data.cart.totalPrice:", data.cart.totalPrice);
        // Update total amount displayed in the HTML
        document.getElementById("totalAmount").innerHTML = `
                <p>Total</p>
                <p class="cart_amount">${data.cart.totalPrice}</p>
            `;
        document.getElementById("couponMessage").innerHTML = `
                      <p>Coupon Applied !!!!</p>
        `;
        // Toggle button text between Apply Coupon and Remove Coupon
        const button = document.getElementById("couponButton");
        button.textContent = "Remove Coupon";
      } else {
        const errorMessage = await response.text();
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "An error occured while applying coupon",
        });
      }
    } catch (error) {
      console.error("Error applying coupon:", error);
      Swal.fire({
        icon: "error",
        title: "Error",
        text: "An error occurred while applying the coupon",
      });
    }
  }

  async function removeCoupon() {
    try {
      console.log("removeCoupon");
      const response = await fetch("/removeCoupon", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      });
      if (response.ok) {
        const data = await response.json();
        console.log("data:", data);
        totalPrice = null;

        Swal.fire({
          icon: "success",
          title: "Coupon Removed",
          text: data.message,
          showConfirmButton: false,
          timer: 1500,
        });
        // Update total amount displayed in the HTML
        document.getElementById("totalAmount").innerHTML = `
                <p>Total</p>
                <p class="cart_amount">${data.cart.totalPrice}</p>
            `;
        document.getElementById("couponMessage").innerHTML = `
                      <p>Coupon Removed !!!!</p>
        `;
        // Toggle button text back to Apply Coupon
        const button = document.getElementById("couponButton");
        button.textContent = "Apply Coupon";
      } else {
        const errorMessage = await response.text();
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "An error occured while removing coupon",
        });
      }
    } catch (error) {
      console.error("Error removing coupon:", error);
      Swal.fire({
        icon: "error",
        title: "Error",
        text: "An error occurred while removing the coupon",
      });
    }
  }
</script>

<script>
  $(document).ready(function () {
    console.log("proceed to payment");
    var totalAmountText = $(".cart_subtotal p").text().replace("₹", "").trim();
    console.log(totalAmountText);
    var totalAmount = parseFloat(totalAmountText);
    console.log(totalAmount);

    $("form").on("submit", function (event) {
      event.preventDefault(); // Prevent the default form submission

      var isCodSelected = $("#payment_cod").is(":checked");
      var isWalletSelected = $("#payment_wallet").is(":checked");
      var isRazorpaySelected = $("#payment_razorpay").is(":checked");

      if (!isCodSelected && !isWalletSelected && !isRazorpaySelected) {
        showToast("Select a payment option", "warning");
      }

      // Serialize the form data
      var formData = $(this).serialize();
      // Get the value of the selected address
      var selectedAddress = $("input[name='selectAddress']:checked").val();
      console.log(selectedAddress);

      // Append the selected address as a separate parameter
      formData += "&selected_address=" + encodeURIComponent(selectedAddress);
      console.log(formData);

      // Send an AJAX request to the backend
      if (isCodSelected || isWalletSelected) {
        $.ajax({
          type: "POST",
          url: "/place-order",
          data: formData,
          success: function (response) {
            // Handle success response from the server
            console.log(response);
            if (response.error) {
              showToast(response.message, "error");
            } else if (
              response.paymentMethod === "wallet" ||
              response.paymentMethod === "Cash on Delivery"
            ) {
              // Show a success message using SweetAlert2
              if (response.totalAmount >= 1000) {
                Swal.fire({
                  icon: "success",
                  title: "Order Placed",
                  text: "Your order has been successfully placed!",
                  confirmButtonColor: "#3085d6",
                  confirmButtonText: "OK",
                }).then((result) => {
                  if (result.isConfirmed) {
                    // Redirect to the order success page
                    window.location.href = "/order-success";
                  }
                });
              } else {
                showToast("Cant use COD under ₹1000", "warning");
              }
            } else if (response.error) {
              // Show an error message
              console.error("Error placing order:", response);
              alert("Failed to place order. Please try again.");
            }
          },
          error: function (jqXHR, textStatus, errorThrown) {
            // Handle error response from the server
            const errorMessage =
              jqXHR.responseJSON?.message || "An error occurred";
            showToast(errorMessage, "error"); // Display error message to the user
          },
        });
      } else if (isRazorpaySelected) {
        console.log("razorpay");
        fetch("/createorder", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ totalPrice: totalAmount }),
        })
          .then((response) => response.json())
          .then((data) => {
            console.log(data);
            const parseAmount = parseInt(data.totalPrice);
            console.log(parseAmount);
            var options = {
              key: "rzp_test_ywCWUQCjUZBwUk",
              amount: data.orderId.amount,
              currency: "INR",
              name: "ArmorHead",
              description: "Test Transaction",
              image: "/user-assets/img/logo-only.png",
              order_id: data.orderId.id,
              handler: function (response) {
                console.log(response);
                console.log("Hello");
                verify(response, data.orderId.id, formData);
                console.log("hey");
              },
              prefill: {
                name: "Ranga Annan",
                email: "rangaannan@gmail.com",
                contact: "1234567890",
              },
              notes: {
                address: "Banglore City",
              },
              theme: {
                color: "#3399cc",
              },
            };
            var rzp = new Razorpay(options);
            rzp.open();
            rzp.on("payment.failed", function (response) {
              console.log("Payment failed:", response.error.description);
              handleFailure(response.error.description);
            });

            function handleFailure(description) {
              console.log("Payment failed:", description);

              // Redirect to appropriate page or handle as required
              createOrderWithStatusPending();
              
              setTimeout(() => {
                window.location.href = "/order-details";
              }, 2000);
            }

            function createOrderWithStatusPending() {
              console.log("inside createOrderWithStatusPending");
              fetch("/failedRazorpay", {
                method: "POST",
                headers: {
                  "Content-Type": "application/x-www-form-urlencoded",
                },
                body: formData,
              })
                .then((response) => {
                  if (!response.ok) {
                    throw new Error("Failed to create order.");
                  }
                  return response.json();
                })
                .then((data) => {
                  console.log(data);
                  if (data.success) {
                    // Redirect to the appropriate page with the newly created order ID

                    window.location.href = "/order-details";
                  } else {
                    console.error("Error: Order creation failed");
                    // Handle the error case where order creation fails
                    // You may redirect to an error page or display a message to the user
                  }
                })
                .catch((error) => {
                  console.error("Error:", error);
                  // Handle any errors that occur during the fetch operation
                  // You may redirect to an error page or display a message to the user
                });
            }

            function verify(response, orderId, formData) {
              console.log("inside verify");
              console.log(response);
              console.log(orderId);
              console.log(formData);
              fetch("/paymentSuccess", {
                method: "post",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  paymentid: response.razorpay_payment_id,
                  razorpayorderid: response.razorpay_order_id,
                  signature: response.razorpay_signature,
                  orderId,
                }),
              })
                .then((response) => {
                  if (response.ok) {
                    fetch("/place-order", {
                      method: "POST",
                      headers: {
                        "Content-Type": "application/x-www-form-urlencoded",
                      },
                      body: formData,
                    })
                      .then((response) => response.json())
                      .then((data) => {
                        console.log(data);
                        window.location.href = "/order-success";
                      })
                      .catch((error) => {
                        console.error("Error:", error);
                      });
                  } else {
                    console.error("Payment failed:");

                    alert("Payment failed. Please try again later.");
                  }
                })
                .catch((error) => {
                  // Handle any errors that occur during the fetch operation
                  console.error("Error:", error);
                });
            }
          });
      }
    });
  });

  function showToast(message, type) {
    // Initialize the background color based on the toast type
    let backgroundColor;

    // Determine the background color based on the type
    switch (type) {
      case "error":
        backgroundColor = "#ff6347"; // Tomato red for error
        break;
      case "success":
        backgroundColor = "#32CD32"; // Lime green for success
        break;
      case "warning":
        backgroundColor = "#FFA500"; // Orange for warning
        break;
      default:
        backgroundColor = "#000000"; // Black for unknown types
    }

    // Create and display the toast notification with Toastify
    Toastify({
      text: message, // Message to be displayed
      duration: 3000, // Duration for which the toast is visible
      position: "center", // Position of the toast
      gravity: "top", // Toast appears at the top of the screen
      backgroundColor, // Background color determined by type
      close: true, // Show a close button on the toast
    }).showToast(); // Display the toast
  }
</script>

<script>
  function addNewAddress(event) {
    event.preventDefault(); // Prevent the default form submission

    // Get the values of the input fields
    const firstName = document.getElementById("firstName").value;
    const lastName = document.getElementById("lastName").value;
    const house = document.getElementById("house").value;
    const locality = document.getElementById("locality").value;
    const city = document.getElementById("city").value;
    const state = document.getElementById("state").value;
    const pincode = document.getElementById("pincode").value;
    const country = document.getElementById("country").value;
    const email = document.getElementById("email").value;
    const phone = document.getElementById("phone").value;

    // Create an object with the input field values
    const addressData = {
      firstName,
      lastName,
      house,
      locality,
      city,
      state,
      pincode,
      country,
      email,
      phone,
    };

    // Send POST request to add new address
    fetch("/add-address", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(addressData),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          // Display success message and reload the page
          Toastify({
            text: "Address added successfully",
            duration: 1000,
            gravity: "top",
            position: "center",
            backgroundColor: "green",
          }).showToast();
          setTimeout(() => {
            window.location.reload();
          }, 1000);
        } else {
          // Handle error response
          Toastify({
            text: "Address not added",
            duration: 1000,
            gravity: "top",
            position: "center",
            backgroundColor: "green",
          }).showToast();
        }
      })
      .catch((error) => {
        console.error("Error:", error);

        // Handle unexpected errors
        swal.fire({
          title: "Error",
          text: "Failed to communicate with the server",
          icon: "error",
          confirmButtonColor: "#d33",
          confirmButtonText: "Okay",
        });
      });
  }
</script>
<script>
  function enableEdit(button) {
    const form = button.closest("form");
    const inputs = form.querySelectorAll("input");
    inputs.forEach((input) => {
      input.disabled = false;
    });
    form.querySelector(".edit-button").style.display = "none";
    form.querySelector(".confirm-edit-button").style.display = "inline-block";
    form.querySelector(".cancel-edit-button").style.display = "inline-block";
  }

  function cancelEdit(button) {
    const form = button.closest("form");
    const inputs = form.querySelectorAll("input");
    inputs.forEach((input) => {
      input.disabled = true;
    });
    form.querySelector(".edit-button").style.display = "inline-block";
    form.querySelector(".confirm-edit-button").style.display = "none";
    form.querySelector(".cancel-edit-button").style.display = "none";

    // Optionally reset the form values to original
    form.reset();
  }

  function confirmEdit(button, addressId) {
    const form = button.closest("form");
    const formData = new FormData(form);
    const addressData = {};
    formData.forEach((value, key) => {
      addressData[key] = value;
    });
    addressData.addressId = addressId;
    // Send POST request to update address
    fetch("/updateAddress", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(addressData),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          Toastify({
            text: data.message,
            duration: 1000,
            gravity: "top",
            position: "center",
            backgroundColor: "green",
          }).showToast();
          setTimeout(() => {
            window.location.reload();
          }, 1000);
        } else {
          // Handle error response from the server
          Toastify({
            text: data.message,
            duration: 1000,
            gravity: "top",
            position: "center",
            backgroundColor: "green",
          }).showToast();
        }
      })
      .catch((error) => {
        console.error("Error:", error);
      });
  }
</script>

<!-- <script>
    // Wait for the document to be fully loaded
    document.addEventListener("DOMContentLoaded", function() {
        // Get all the checkboxes for selecting addresses
        var checkboxes = document.querySelectorAll('input[name="selectAddress"]');
        
        // Add a click event listener to each checkbox
        checkboxes.forEach(function(checkbox) {
            checkbox.addEventListener('click', function(event) {
                // Check if the checkbox is checked
                if (this.checked) {
                    // If checked, do something (e.g., highlight the selected address)
                    var selectedAddressId = this.value; // Get the ID of the selected address
                    var selectedAddressContainer = document.querySelector('#address_' + selectedAddressId); // Get the container of the selected address
                    // Example: Add a class to highlight the selected address
                    selectedAddressContainer.classList.add('selected-address');
                    
                    // Optionally, you can also perform additional actions here, such as updating the UI to reflect the selected address
                } else {
                    // If unchecked, you can perform some other actions (e.g., remove the highlight)
                    var selectedAddressId = this.value; // Get the ID of the selected address
                    var selectedAddressContainer = document.querySelector('#address_' + selectedAddressId); // Get the container of the selected address
                    // Example: Remove the class to unhighlight the selected address
                    selectedAddressContainer.classList.remove('selected-address');
                }
            });
        });
    });
</script> -->

<script>
  // Function to fetch all countries from the REST Countries API
  async function fetchCountries() {
    try {
      const response = await fetch("https://restcountries.com/v3.1/all");
      const data = await response.json();
      return data;
    } catch (error) {
      console.error("Error fetching countries:", error);
      return [];
    }
  }

  // Function to populate the select dropdown with country options
  async function populateCountries() {
    const selectCountry = document.querySelector('select[name="country"]');
    const selectState = document.querySelector('input[name="state"]');

    // Fetch all countries
    const countries = await fetchCountries();

    // Sort countries alphabetically by name
    countries.sort((a, b) => {
      if (a.name.common < b.name.common) return -1;
      if (a.name.common > b.name.common) return 1;
      return 0;
    });

    // Clear existing options
    selectCountry.innerHTML = "";

    // Populate the select dropdown with countries
    countries.forEach((country) => {
      const option = document.createElement("option");
      option.value = country.name.common;
      option.textContent = country.name.common;
      selectCountry.appendChild(option);
    });

    // Auto-locate the user's location
    autoLocateLocation(selectCountry, selectState);
  }

  // Function to auto-locate the user's location
  function autoLocateLocation(selectCountry, selectState) {
    // Check if geolocation is supported by the browser
    if ("geolocation" in navigator) {
      // Get user's current position
      navigator.geolocation.getCurrentPosition(async (position) => {
        const { latitude, longitude } = position.coords;
        const location = await reverseGeocode(latitude, longitude);
        if (location) {
          const { city, state, country } = location;
          // Select the detected location in the dropdowns
          selectCountry.value = country;
          selectState.value = state;
        }
      });
    } else {
      console.error("Geolocation is not supported by this browser.");
    }
  }

  // Function to reverse geocode the location from coordinates
  async function reverseGeocode(latitude, longitude) {
    try {
      const response = await fetch(
        `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`
      );
      const data = await response.json();
      return {
        state: data.principalSubdivision,
        country: data.countryName,
      };
    } catch (error) {
      console.error("Error reverse geocoding:", error);
      return null;
    }
  }

  // Call the populateCountries function when the DOM is loaded
  document.addEventListener("DOMContentLoaded", populateCountries);
</script>

<script>
  // JavaScript to toggle CSS class on COD button click
  document.addEventListener("DOMContentLoaded", function () {
    const codButton = document.querySelector(".cod-button");
    codButton.addEventListener("click", function () {
      codButton.classList.toggle("clicked");
    });
  });
</script>

<script>
  // Get the checkbox element
  const codCheckbox = document.getElementById("cod-checkbox");

  // Check if the checkbox is checked
  if (codCheckbox.checked) {
    console.log("Cash on Delivery (COD) option is checked");
  } else {
    console.log("Cash on Delivery (COD) option is not checked");
  }
</script>

<style>
  table {
    border-collapse: separate;
    border-spacing: 10px; /* Adjust the spacing as needed */
    width: 100%;
    border: 1px solid #ccc; /* Outside border color */
  }

  th,
  td {
    padding: 10px; /* Adjust padding as needed */
    border-bottom: 1px solid #ddd; /* Bottom border color */
  }

  th {
    background-color: #f2f2f2; /* Grey shaded background color for header */
  }

  tbody tr:last-child td {
    border-bottom: none; /* Remove bottom border from last row */
  }
</style>
