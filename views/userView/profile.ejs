<!-- Include Partial Header -->
<%- include("../partials/userHeader") %>

<main>
  <!-- User Profile Section -->
  <section class="user-profile-area pt-100 pb-100" style="display: flex; flex-direction: row;">
    <div class="user-sidebar" style="
        background-color: #2c3e50; 
        color: white; 
        padding: 20px; 
        width: 300px; 
        height: 200px; 
        margin-top: 250px;
        position: fixed; 
        top: 0; 
        left: 0; 
        border-radius: 0 10px 10px 0; 
        box-shadow: 2px 0 15px rgba(0, 0, 0, 0.2);
        ">
      <!-- User Profile Sidebar -->
      <div class="user-profile-sidebar">
        <ul class="user-profile-menu" style="list-style-type: none; padding: 0; margin: 0;">
          <li style="margin-bottom: 15px;"><a href="/user-profile" style="color: white; text-decoration: none; font-weight: bold;">Profile Details</a></li>
          <li style="margin-bottom: 15px;"><a href="/changePassword" style="color: white; text-decoration: none; font-weight: bold;">Change Password</a></li>
          <li style="margin-bottom: 15px;"><a href="/order-details" style="color: white; text-decoration: none; font-weight: bold;">Order Details</a></li>
          <li style="margin-bottom: 15px;"><a href="/address" style="color: white; text-decoration: none; font-weight: bold;">Address Management</a></li>
          <li style="margin-bottom: 15px;"><a href="/get-wallet" style="color: white; text-decoration: none; font-weight: bold;">Wallet</a></li>
        </ul>
      </div>
    </div>

    <!-- User Profile Content -->
    <div class="container" style="margin-left: 320px;">
      <div class="user-profile-content" style="padding: 20px; background-color: #fff; border-radius: 10px; box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);">
        <h2 style="color: #2c3e50;">Hello <%= loginStatus.username %></h2>
        <p style="color: #7f8c8d;">
          From your account dashboard, you can view your recent orders, manage your shipping and billing addresses, and edit your password and account details.
        </p>

        <!-- Account Details -->
        <div class="account-details" style="margin-bottom: 30px;">
          <h3 style="color: #34495e;">Account Details</h3>
          <p>Your Name : <%= loginStatus.username %></p>
          <p>Email : <%= loginStatus.email %></p>
          <button
            style="width: 110px; background-color: red; color: white; border-radius: 5px; padding: 10px;"
          >
            <a href="/logout" style="text-decoration: none; color: white;">Sign Out</a>
          </button>
        </div>
      </div>
    </div>
  </section>
</main>

<!-- Include Partial Footer -->
<%- include("../partials/userFooter") %>
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script>
  // Get the change password button and modal
  const changePasswordBtn = document.getElementById("changePasswordBtn");
  const changePasswordModal = document.getElementById("changePasswordModal");

  // Open the change password modal when the button is clicked
  changePasswordBtn.addEventListener("click", function () {
    changePasswordModal.style.display = "block";

  });

  // Close the change password modal
  function closeModall() {
    var modal = document.getElementById("changePasswordModal");
    modal.style.display = "none";
  }

  // Handle form submission
 // Handle form submission
document.addEventListener("DOMContentLoaded", function () {
  const changePasswordForm = document.getElementById("changePasswordForm");

  changePasswordForm.addEventListener("submit", async function (event) {
    event.preventDefault();

    // Get current and new password values
      const currentPassword = document.getElementById("currentPassword").value;
      const newPassword = document.getElementById("newPassword").value;

      // Create a data object to send in the request body
      const data = {
        currentPassword: currentPassword,
        newPassword: newPassword
      };

    fetch("/change-password", {
      method: "POST",
      headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(data) // Pass the data object as JSON in the request body
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          swal
            .fire({
              title: "Successful",
              text: data.message,
              icon: "success",
              showCancelButton: false,
              confirmButtonColor: "#3085d6",
              confirmButtonText: "Okay",
            })
            .then((result) => {
             closeModall()
            });
        } else {
          swal
            .fire({
              title: "Error",
              text: data.message,
              icon: "error",
              showCancelButton: false,
              confirmButtonColor: "#d33",
              confirmButtonText: "Okay",
            })
            .then((result) => {
              // Handle the "Okay" button click if needed
            });
        }
      })
      .catch((error) => {
        console.error("Error:", error);
        swal
          .fire({
            title: "Error",
            text: "Failed to communicate with the server",
            icon: "error",
            showCancelButton: false,
            confirmButtonColor: "#d33",
            confirmButtonText: "Okay",
          })
          .then((result) => {
            // Handle the "Okay" button click if needed
          });
      });
  });
});
</script>

<script>
  $(".edit-address-btn").click(function () {
    var addressData = $(this).data("address");
    $("#editAddressId").val(addressData._id);
    $("#editFirstName").val(addressData.firstName);
    $("#editLastName").val(addressData.lastName);
    $("#editHouse").val(addressData.house);
    $("#editLocality").val(addressData.locality);
    $("#editCity").val(addressData.city);
    $("#editState").val(addressData.state);
    $("#editPincode").val(addressData.pincode);
    $("#editCountry").val(addressData.country);
    $("#editEmail").val(addressData.email);
    $("#editPhone").val(addressData.phone);
    
    $("#editAddressModal").show();
  });

  function closeModal() {
    var modal = document.getElementById("editAddressModal");
    modal.style.display = "none"; // Hide the modal
  }

  // Function to close the add address modal
  function closeAddAddressModal() {
    var addAddressModal = document.getElementById("addAddressModal");
    addAddressModal.style.display = "none";
  }

  // Handle form submission
  document.addEventListener("DOMContentLoaded", function () {
    // Select the edit address form
    const editAddressForm = document.getElementById("editAddressForm");

    // Attach an event listener to the form submission
    editAddressForm.addEventListener("submit", async function (event) {
      event.preventDefault(); // Prevent the default form submission

      // Serialize form data into JSON object
      const formData = new FormData(this);
      const addressData = {};
      for (const [key, value] of formData.entries()) {
        addressData[key] = value;
      }

      // Send a POST request to update the address
      fetch("/updateAddress", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(addressData),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            // Display SweetAlert success message with an "Okay" button
            swal
              .fire({
                title: "Success",
                text: data.message,
                icon: "success",
                showCancelButton: false,
                confirmButtonColor: "#3085d6",
                confirmButtonText: "Okay",
              })
              .then((result) => {
                // Handle the "Okay" button click if needed
                window.location.reload(); // Reload the page after successful update
              });
          } else {
            // Display SweetAlert error message with an "Okay" button
            swal
              .fire({
                title: "Error",
                text: data.message,
                icon: "error",
                showCancelButton: false,
                confirmButtonColor: "#d33",
                confirmButtonText: "Okay",
              })
              .then((result) => {
                // Handle the "Okay" button click if needed
              });
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          // Display SweetAlert error message if there is an error in the fetch request
          swal
            .fire({
              title: "Error",
              text: "Failed to communicate with the server",
              icon: "error",
              showCancelButton: false,
              confirmButtonColor: "#d33",
              confirmButtonText: "Okay",
            })
            .then((result) => {
              // Handle the "Okay" button click if needed
            });
        });
    });
  });

  function deleteAddress(addressId) {
    // Send a DELETE request to delete the address
    fetch("/delete-address/" + addressId, {
      method: "DELETE",
    })
      .then((response) => response.json())
      .then((data) => {
        // Display SweetAlert success message with an "Okay" button
        swal
          .fire({
            title: "Success",
            text: data.message,
            icon: "success",
            showCancelButton: false,
            confirmButtonColor: "#3085d6",
            confirmButtonText: "Okay",
          })
          .then((result) => {
            // Handle the "Okay" button click if needed
            window.location.reload(); // Reload the page after successful deletion
          });
      })
      .catch((error) => {
        console.error("Error:", error);
        // Display SweetAlert error message if there is an error in the fetch request
        swal
          .fire({
            title: "Error",
            text: "Failed to communicate with the server",
            icon: "error",
            showCancelButton: false,
            confirmButtonColor: "#d33",
            confirmButtonText: "Okay",
          })
          .then((result) => {
            // Handle the "Okay" button click if needed
          });
      });
  }

  document
    .getElementById("addAddressForm")
    .addEventListener("submit", function (event) {
      event.preventDefault(); // Prevent the default form submission

      // Collect form data
      const formData = new FormData(this);

      // Convert form data to JSON object
      const addressData = {};
      formData.forEach((value, key) => {
        addressData[key] = value;
      });

      // Make a POST request to add the address
      fetch("/add-address", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(addressData),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            // Display Swal fire success message
            swal
              .fire({
                title: "Success",
                text: data.message,
                icon: "success",
                showCancelButton: false,
                confirmButtonColor: "#3085d6",
                confirmButtonText: "Okay",
              })
              .then((result) => {
                // Redirect to the home page after successful addition
                window.location.href = "/user-profile";
              });
          } else {
            // Display Swal fire error message
            swal.fire({
              title: "Error",
              text: data.message,
              icon: "error",
              showCancelButton: false,
              confirmButtonColor: "#d33",
              confirmButtonText: "Okay",
            });
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          // Display Swal fire error message for communication failure
          swal.fire({
            title: "Error",
            text: "Failed to communicate with the server",
            icon: "error",
            showCancelButton: false,
            confirmButtonColor: "#d33",
            confirmButtonText: "Okay",
          });
        });
    });
</script>

<script>
  async function fetchCountries() {
    // Fetch countries from API
  }

  async function populateCountries() {
    const selectCountry = document.querySelector('input[name="country"]');
    const selectState = document.querySelector('input[name="state"]');
    const pincodeInput = document.querySelector('input[name="pincode"]');

    const countries = await fetchCountries();

    countries.sort((a, b) => {
      if (a.name.common < b.name.common) return -1;
      if (a.name.common > b.name.common) return 1;
      return 0;
    });

    selectCountry.innerHTML = "";

    countries.forEach((country) => {
      const option = document.createElement("option");
      option.value = country.name.common;
      option.textContent = country.name.common;
      selectCountry.appendChild(option);
    });

    autoLocateLocation(selectCountry, selectState, pincodeInput);
  }

  function autoLocateLocation(selectCountry, selectState, pincodeInput) {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition(async (position) => {
        const { latitude, longitude } = position.coords;
        const location = await reverseGeocode(latitude, longitude);
        if (location) {
          const { state, country, pincode } = location;
          selectCountry.value = country;
          selectState.value = state;
          pincodeInput.value = pincode; // Set the value of the pincode input field
        }
      });
    } else {
      console.error("Geolocation is not supported by this browser.");
    }
  }

  async function reverseGeocode(latitude, longitude) {
    // Reverse geocoding API call
  }

  document.addEventListener("DOMContentLoaded", populateCountries);
</script>

<script>
  // Get the modal
  const addAddressModal = document.getElementById("addAddressModal");

  // Get the button that opens the modal
  const openAddAddressModalBtn = document.getElementById(
    "openAddAddressModalBtn"
  );

  // Get the <span> element that closes the modal
  const closeAddAddressModalSpan = document.getElementsByClassName("close")[0];

  // When the user clicks the button, open the modal
  openAddAddressModalBtn.onclick = function () {
    addAddressModal.style.display = "block";
  };

  // When the user clicks on <span> (x), close the modal
  closeAddAddressModalSpan.onclick = function () {
    addAddressModal.style.display = "none";
  };

  // When the user clicks anywhere outside of the modal, close it
  window.onclick = function (event) {
    if (event.target == addAddressModal) {
      addAddressModal.style.display = "none";
    }
  };
</script>
<!-- 
<style>
  /* Global Styles */
  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f8f8f8;
  }

  /* Container Styles */
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 15px;
  }

  /* User Profile Section Styles */
  .user-profile-area {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    padding: 20px;
    margin-bottom: 30px;
  }

  /* User Profile Sidebar Styles */
  .user-profile-sidebar {
    width: 500px;
    background-color: #f2f2f2;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    margin-bottom: 30px;
  }

  .user-profile-menu {
    list-style-type: none;
    padding: 0;
    margin: 0;
  }

  .user-profile-menu li {
    margin-bottom: 10px;
  }

  .user-profile-menu li a {
    color: #333;
    text-decoration: none;
    font-weight: bold;
    transition: color 0.3s;
  }

  .user-profile-menu li a:hover {
    color: #ff6347;
  }

  /* User Profile Content Styles */
  .user-profile-content {
    padding: 20px;
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  }

  .user-profile-content h2 {
    color: #333;
    margin-bottom: 20px;
  }

  .user-profile-content p {
    color: #666;
    line-height: 1.6;
    margin-bottom: 20px;
  }

  /* Recent Orders Styles */
  .recent-orders h3 {
    color: #333;
    margin-bottom: 20px;
  }
  /* To Order Details Button Styles */
  .recent-orders button {
    background-color: #ff6347;
    color: #fff;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
    margin-top: 20px; /* Adjust margin-top as needed */
  }

  .recent-orders button:hover {
    background-color: #e74c3c;
  }

  .order-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  }

  .order-table th,
  .order-table td {
    padding: 15px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }

  .order-table th {
    background-color: #f2f2f2;
    font-weight: bold;
    color: #333;
  }

  .order-table td.product-image img {
    max-width: 100px;
    height: auto;
    border-radius: 5px;
  }

  /* Add Address Button Styles */
  .addresses button#openAddAddressModalBtn {
    background-color: #ff6347;
    color: #fff;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
    margin-bottom: 20px;
  }

  .addresses button#openAddAddressModalBtn:hover {
    background-color: #e74c3c;
  }

  /* Addresses Styles */
  .addresses {
    margin-bottom: 30px;
  }

  .address-table {
    width: 100%;
    border-collapse: collapse;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  }

  .address-table td {
    padding: 20px;
    border-bottom: 1px solid #ddd;
  }

  .address-table td:first-child {
    border-left: 1px solid #ddd;
  }

  .address-table td:last-child {
    border-right: 1px solid #ddd;
  }

  .address-table .address {
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 10px;
    background-color: #f9f9f9;
  }

  .address-table .address h4 {
    color: #333;
    margin-bottom: 10px;
  }

  .address-table .address p {
    color: #666;
    margin-bottom: 5px;
  }

  .address-table .address button {
    background-color: #ff6347;
    color: #fff;
    border: none;
    padding: 8px 15px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  .address-table .address button.edit-address-btn {
    margin-right: 10px;
  }

  .address-table .address button.edit-address-btn:hover,
  .address-table .address button.delete-address-btn:hover {
    background-color: #e74c3c;
  }

  /* Edit Address Modal */
  #editAddressModal {
    display: none;
    background-color: #f2f2f2;
    padding: 20px;
    border-radius: 10px;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    max-width: 600px;
    width: 90%;
    max-height: 80%;
    height: 800px;
    overflow-y: auto;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  }

  /* Add Address Modal */
  #addAddressModal {
    display: none;
    background-color: #f2f2f2;
    padding: 20px;
    border-radius: 10px;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    max-width: 600px;
    width: 90%;
    max-height: 90%; /* Increase the maximum height */
    height: 90%; /* Increase the height */
    overflow-y: auto;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  }

  /* Form Field Styles */
  .modal-content input[type="text"],
  .modal-content input[type="hidden"] {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    width: 100%;
    margin-bottom: 15px;
  }

  /* Button Styles */
  .button-container {
    display: flex;
    justify-content: center;
    margin-top: 20px;
  }

  .button-container button {
    background-color: #ff6347;
    color: #fff;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
    margin-right: 10px;
  }

  .button-container button:last-child {
    margin-right: 0;
  }

  .button-container button:hover {
    background-color: #e74c3c;
  }

  /* Modal Button Styles */
  .modal-buttons button {
    background-color: #ff6347;
    color: #fff;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
    margin-right: 10px; /* Adjust margin-right as needed */
  }

  .modal-buttons button:last-child {
    margin-right: 0;
  }

  .modal-buttons button:hover {
    background-color: #e74c3c;
  }
</style> -->
