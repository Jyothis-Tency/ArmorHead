<%- include("../partials/userHeader") %>

<section class="content-main" style="margin-top: 20px">
  <div class="content-header">
    <div>
      <h2 class="content-title card-title" style="font-size: 24px">
        Order detail
      </h2>
    </div>
  </div>
  <div class="card" style="margin-top: 20px">
    <div class="card-body">
      <div class="row mb-50 mt-20 order-info-wrap">
        <div class="col-md-4">
          <article
            class="icontext align-items-start"
            style="display: flex; align-items: center"
          >
            <span
              class="icon icon-sm rounded-circle bg-primary-light"
              style="
                display: flex;
                justify-content: center;
                align-items: center;
                width: 40px;
                height: 40px;
                background-color: #f0f8ff;
                border-radius: 50%;
              "
            >
              <i
                class="text-primary material-icons md-person"
                style="font-size: 20px"
                >person</i
              >
            </span>
            <div class="text" style="margin-left: 10px">
              <!-- <h6 class="mb-1" style="margin: 0; font-size: 16px">Customer</h6> -->
              <p class="mb-1" style="margin: 0; font-size: 14px">
                <%= orderDetails[0].userDetails[0].username %> <br />
                <%= orderDetails[0].userDetails[0].email %> <br />
                <%= orderDetails[0].userDetails[0].phone %>
              </p>
            </div>
          </article>
        </div>
        <div class="col-md-4">
          <article
            class="icontext align-items-start"
            style="display: flex; align-items: center"
          >
            <span
              class="icon icon-sm rounded-circle bg-primary-light"
              style="
                display: flex;
                justify-content: center;
                align-items: center;
                width: 40px;
                height: 40px;
                background-color: #f0f8ff;
                border-radius: 50%;
              "
            >
              <i
                class="text-primary material-icons md-place"
                style="font-size: 20px"
                >place</i
              >
            </span>
            <div class="text" style="margin-left: 10px">
              <!-- <h6 class="mb-1" style="margin: 0; font-size: 16px">
                Deliver to
              </h6> -->
              <p class="mb-1" style="margin: 0; font-size: 14px">
                <%= orderDetails[0].address.house %> <br />
                City: <%= orderDetails[0].address.city %>, <%=
                orderDetails[0].address.state %> <br />
                Po Box <%= orderDetails[0].address.pincode %>
              </p>
            </div>
          </article>
        </div>
        <% if (orderDetails.length> 0 && orderDetails[0].orderStatus ===
        'delivered') { %>
        <input
          type="hidden"
          value="<%= JSON.stringify(orderDetails) %>"
          id="orderDetailsData"
        />
        <input
          type="hidden"
          value="<%= JSON.stringify(userAddress) %>"
          id="userAddressData"
        />
        <a
          id="downloadInvoiceButton"
          class="btn btn-primary"
          style="margin-top: 10px"
          onclick="handleDownloadInvoice()"
          >Download Invoice</a
        >
        <% } %>
      </div>

      <div class="card-body" style="margin-top: 20px">
        <div class="table-responsive">
          <table
            class="table table-hover"
            style="text-align: center; width: 100%"
          >
            <thead>
              <tr>
                <th scope="col" style="text-align: center; width: 15%">
                  Image
                </th>
                <th scope="col" style="text-align: center; width: 15%">
                  Product
                </th>
                <th scope="col" style="text-align: center; width: 15%">Size</th>
                <th scope="col" style="text-align: center; width: 15%">
                  Unit Price
                </th>
                <th scope="col" style="text-align: center; width: 15%">
                  Quantity
                </th>
                <th scope="col" style="text-align: center; width: 15%">
                  Sub Total
                </th>
                <th scope="col" style="text-align: center; width: 15%">
                  Order Status
                </th>
                <th scope="col" style="text-align: center; width: 20%">
                  Action
                </th>
                <!-- New Column -->
              </tr>
            </thead>
            <tbody>
              <% for (let i = 0; i < orderDetails.length; i++) { %>
              <tr>
                <td style="text-align: left">
                  <a class="itemside" href="#">
                    <div
                      class="center"
                      style="
                        display: flex;
                        justify-content: center;
                        align-items: center;
                      "
                    >
                      <img
                        src="/uploads/product-images/<%= orderDetails[i].productDetails[0].productImage[0] %>"
                        width="40"
                        height="40"
                        class="img-xs"
                        alt="Item"
                      />
                    </div>
                  </a>
                </td>
                <td style="text-align: center">
                  <div class="info" style="margin-left: 10px; text-align: left">
                    <%= orderDetails[i].productDetails[0].productName %>
                  </div>
                </td>
                <td style="text-align: center">
                  <%= orderDetails[i].orderedItems.size %>
                </td>
                <td style="text-align: center">
                  ₹<%= orderDetails[i].productDetails[0].salePrice %>
                </td>
                <td style="text-align: center">
                  <%= orderDetails[i].orderedItems.quantity %>
                </td>
                <td style="text-align: center">
                  ₹<%= orderDetails[i].productDetails[0].salePrice *
                  orderDetails[i].orderedItems.quantity %>
                </td>

                <td style="text-align: center">
                  <%= orderDetails[i].orderStatus %>
                </td>

                <td
                  style="
                    padding: 15px;
                    text-align: center;
                    border-bottom: 1px solid #ddd;
                  "
                >
                  <% if (orderDetails[i].paymentStatus === 'success') { if
                  (orderDetails[i].orderStatus === 'cancelled') { %>
                  <span>Cancelled</span>
                  <% } else if (orderDetails[i].orderStatus === 'returned') { %>
                  <span>Returned</span>
                  <% } else if (orderDetails[i].orderStatus === 'confirmed' ||
                  orderDetails[i].orderStatus === 'pending' ||
                  orderDetails[i].orderStatus === 'shipped' ||
                  orderDetails[i].orderStatus === 'outForDelivery') { %>
                  <button
                    class="cancel-btn"
                    data-order-id="<%= orderDetails[i].orderedItemId %>"
                    onclick="cancelOrder('<%= orderDetails[i].orderedItemId %>')"
                    style="
                      background-color: red;
                      color: white;
                      padding: 5px 10px;
                      border: none;
                      cursor: pointer;
                      transition: background-color 0.3s;
                    "
                  >
                    Cancel
                  </button>
                  <% } else if (orderDetails[i].orderStatus === 'delivered') {
                  %> <% if (orderDetails[i].returnProducts.status === true) { %>
                  <span>Waiting for confirmation</span>
                  <% } else { %>
                  <button
                    class="return-btn"
                    data-order-id="<%= orderDetails[i].orderedItemId %>"
                    onclick="openReturnModal('<%= orderDetails[i].orderedItemId %>')"
                    style="
                      background-color: yellow;
                      color: black;
                      padding: 5px 10px;
                      border: none;
                      cursor: pointer;
                      transition: background-color 0.3s;
                    "
                  >
                    Return
                  </button>
                  <% } %> <% } %> <% } else if (orderDetails[i].paymentStatus
                  === 'pending') { %>
                  <!-- <button
                    class="retry-btn"
                    data-order-id="<%= orderDetails[i].orderedItemId %>"
                    style="
                      background-color: #426aed;
                      color: #333;
                      padding: 5px 10px;
                      border: none;
                      cursor: pointer;
                    "
                  >
                    Retry
                  </button> -->
                  <p>Payment is Pending</p>
                  <% } %>
                </td>
              </tr>
              <% } %>
              <tr>
                <td colspan="6" style="padding-top: 20px; text-align: right">
                  <dl>
                    <dt>Coupon:</dt>
                    <dd>
                      <% if (orderDetails[0].coupon) { %> <% let couponUsed =
                      coupons.find(coupon => coupon.couponCode ===
                      orderDetails[0].coupon); if (couponUsed) { %> ₹<%=
                      couponUsed.discount %> <% } else { %>
                      <p>No coupons used</p>
                      <% } %> <% } else { %>
                      <p style="color: rgb(255, 0, 0);">No coupons used !!!!</p>
                      <% } %>
                    </dd>
                  </dl>
                  <dl>
                    <% if(orderDetails[0].paymentStatus === 'pending'){ %>
                    <dt>Payment Pending:</dt>
                    <button
                      class="retry-btn"
                      data-order-id="<%= orderDetails[0].orderedItemId %>"
                      style="
                        background-color: #426aed;
                        color: #ffffff;
                        padding: 5px 10px;
                        border: none;
                        cursor: pointer;
                      "
                    >
                      Retry
                    </button>
                    <% }else if(orderDetails[0].paymentStatus === 'success'){ %>
                    <dt>Payment Status:</dt>
                    <dd>
                      <span
                        class="badge rounded-pill alert-success text-success"
                        >Success</span
                      >
                    </dd>
                    <% } %>
                  </dl>
                  <!-- <dl class="dlist">
                    <dt>Total:</dt>
                    <dd>₹<%= orderDetails[0].totalAmount %></dd>
                  </dl> -->
                  <!-- <dl class="dlist">
                    <dt>Shipping cost:</dt>
                    <dd>₹7.00</dd>
                  </dl> -->
                  <dl class="dlist">
                    <dt>Grand total:</dt>
                    <dd>
                      <b class="h5">₹<%= orderDetails[0].totalAmount %></b>
                    </dd>
                  </dl>
                  <!-- <dl class="dlist">
                    <dt class="text-muted">Status:</dt>
                    <dd>
                      <span
                        class="badge rounded-pill alert-success text-success"
                        >Cash On Delivery</span
                      >
                    </dd>
                  </dl> -->
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <div
    id="returnModal"
    style="
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: white;
      padding: 20px;
      box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
      z-index: 1000;
    "
  >
    <!-- Modal Structure -->
    <div
      class="modal-content"
      style="
        text-align: center;
        padding: 20px;
        border-radius: 8px;
        background-color: white;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.3);
      "
    >
      <h2 style="margin-bottom: 20px">Return Product</h2>
      <p style="margin-bottom: 15px">Why are you returning this product?</p>

      <!-- Radio Buttons for Predefined Reasons -->
      <div style="margin-bottom: 20px">
        <label style="display: block; margin-bottom: 10px">
          <input
            type="radio"
            name="returnReason"
            value="Product Defect"
            checked
          />Product Defect
        </label>
        <label style="display: block; margin-bottom: 10px">
          <input
            type="radio"
            name="returnReason"
            value="Wrong Size or Fit"
          />Wrong Size or Fit
        </label>
        <label style="display: block; margin-bottom: 10px">
          <input type="radio" name="returnReason" value="Changed Mind" />Changed
          Mind
        </label>
        <label style="display: block; margin-bottom: 10px">
          <input
            type="radio"
            name="returnReason"
            value="Incorrect Product"
          />Incorrect Product
        </label>
      </div>

      <!-- Optional Text Area for Additional Explanation -->
      <p style="margin-bottom: 10px">Additional Comments (optional):</p>
      <textarea
        id="additionalReason"
        rows="3"
        cols="30"
        style="
          padding: 10px;
          border: 1px solid #ccc;
          width: 100%;
          border-radius: 5px;
        "
      ></textarea>

      <!-- Modal Buttons -->
      <div style="margin-top: 20px">
        <button
          id="cancelButton"
          style="
            padding: 10px 20px;
            margin: 10px;
            background-color: #f44336;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
          "
          onmouseover="this.style.backgroundColor='#d32f2f';"
          onmouseout="this.style.backgroundColor='#f44336';"
        >
          Cancel
        </button>
        <button
          id="okayButton"
          style="
            padding: 10px 20px;
            margin: 10px;
            background-color: #4caf50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
          "
          onmouseover="this.style.backgroundColor='#388E3C';"
          onmouseout="this.style.backgroundColor='#4CAF50';"
        >
          Okay
        </button>
      </div>
    </div>
  </div>
</section>

<%- include("../partials/userFooter") %>

<!-- Include jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/easyinvoice/dist/easyinvoice.min.js"></script>

<!-- Include Bootstrap JavaScript -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script>
  // Frontend JavaScript code
  function toggleOrderStatus(orderId, newStatus) {
    console.log(orderId);
    console.log(newStatus);
    fetch(`/admin/updateOrderStatus/${orderId}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ newStatus }),
    })
      .then((response) => response.json())
      .then((data) => {
        // Handle successful update
        console.log("Order status updated:", data);
        window.location.reload();
      })
      .catch((error) => {
        // Handle error
        console.error("Error updating order status:", error);
      });
  }
</script>
<script>
  $(document).ready(function () {
    // Event listener for clicking on the modal button
    $(".open-modal-btn").click(function () {
      // Get the data attributes for return reason and message
      var returnReason = $(this).data("return-reason");
      var returnMessage = $(this).data("return-message");

      // Set the content of the modal
      $("#modalReturnReason").text(returnReason);
      $("#modalReturnMessage").text(returnMessage);

      // Open the modal
      $("#returnReasonModal").modal("show");
    });
  });
</script>

<script>
  // Retry button click handling for Razorpay payments
  $(document).on("click", ".retry-btn", function (event) {
    event.preventDefault(); // Prevent default link behavior
    const orderId = $(this).data("order-id");
    console.log("Retrying Razorpay payment for Order ID:", orderId);

    $.ajax({
      type: "POST",
      url: "/second-try",
      data: { payment_method: "razorpay", order_id: orderId },
      success: function (response) {
        paymentMethodRazorpayPayment(response);
      },
      error: function (xhr, status, error) {
        console.error("Error retrying payment:", error);
        const errorMessage = xhr.responseJSON
          ? xhr.responseJSON.message
          : "An error occurred while retrying the payment. Please try again later.";
        Swal.fire({
          title: "Error",
          text: errorMessage,
          icon: "error",
          confirmButtonText: "Okay",
        });
      },
    });
  });

  function paymentMethodRazorpayPayment(orderinfo) {
    console.log("Processing Razorpay Payment");
    const options = {
      key: "rzp_test_ywCWUQCjUZBwUk", // Your Razorpay Key ID
      amount: orderinfo.razorpayOrderDetails.amount, // in subunits
      currency: "INR",
      name: "ArmorHead", // Business name
      description: "Test Transaction",
      order_id: orderinfo.razorpayOrderDetails.id,
      handler: function (response) {
        verifyPaymentSignature(response, orderinfo);
      },
      prefill: {
        name: "Ranga Annan",
        email: "rangaannan@gmail.com",
        contact: "1234567890",
      },
      theme: {
        color: "#3399cc",
      },
    };

    const rzp1 = new Razorpay(options);
    rzp1.open();
  }

  function verifyPaymentSignature(payment, orderinfo) {
    console.log("Verifying Razorpay Payment Signature");
    $.ajax({
      url: "/verify-payment",
      method: "POST",
      data: { payment, orderinfo },
      success: function (response) {
        if (response.status) {
          Swal.fire({
            title: "Success",
            text: "Payment successful!",
            icon: "success",
            confirmButtonText: "Okay",
            timer: 3000, // Auto-dismiss after 3 seconds
          }).then(() => {
            window.location.reload();
          });
        } else {
          Swal.fire({
            title: "Failed",
            text: "Payment verification failed.",
            icon: "error",
            confirmButtonText: "Okay",
          }).then(() => {
            window.location.reload();
          });
        }
      },
      error: function (err) {
        Swal.fire({
          title: "Error",
          text: "Payment verification error.",
          icon: "error",
          confirmButtonText: "Okay",
        });
      },
    });
  }

  function cancelOrder(orderId) {
    Swal.fire({
      title: "Are you sure?",
      text: "This will cancel the order and it cannot be undone.",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "Yes, cancel it!",
      cancelButtonText: "No, keep it",
    }).then((result) => {
      if (result.isConfirmed) {
        $.ajax({
          url: "/cancel-order",
          method: "POST",
          data: { orderId },
          success: function (response) {
            Toastify({
              text: "Your order has been cancelled",
              duration: 3000, // Duration in milliseconds
              close: true, // Show close button
              gravity: "top", // Display position: 'top', 'bottom', 'left', 'right'
              position: "center", // Alignment of position: 'left', 'right', 'center'
              backgroundColor: "green", // Background color
            }).showToast();
            setTimeout(() => {
              window.location.reload();
            }, 3000);
          },
          error: function (err) {
            Swal.fire({
              title: "Error",
              text: "Failed to cancel the order. Please try again later.",
              icon: "error",
              confirmButtonText: "Okay",
            });
          },
        });
      }
    });
  }

  function openReturnModal(orderId) {
    const modal = document.getElementById("returnModal");
    modal.style.display = "block";
    modal.dataset.orderId = orderId;
  }

  function closeReturnModal() {
    const modal = document.getElementById("returnModal");
    modal.style.display = "none";
  }

  document.getElementById("cancelButton").onclick = closeReturnModal;

  document.getElementById("okayButton").onclick = function () {
    const modal = document.getElementById("returnModal");
    const orderId = modal.dataset.orderId;
    const selectedReason = document.querySelector(
      "input[name='returnReason']:checked"
    ).value;
    const additionalReason = document.getElementById("additionalReason").value;

    $.ajax({
      type: "POST",
      url: "/conformReturn", // Adjust endpoint as needed
      data: {
        orderId: orderId,
        returnReason: selectedReason,
        additionalReason: additionalReason,
      },
      success: function (response) {
        console.log("Return submitted:", response);
        Toastify({
          text: response.message,
          duration: 3000, // Duration in milliseconds
          close: true, // Show close button
          gravity: "top", // Display position: 'top', 'bottom', 'left', 'right'
          position: "center", // Alignment of position: 'left', 'right', 'center'
          backgroundColor: "green", // Background color
        }).showToast();
        setTimeout(() => {
          closeReturnModal();
          window.location.reload();
        }, 3000);
      },
      error: function (error) {
        console.error("Error submitting return:", error);
        Toastify({
          text: error.message,
          duration: 3000, // Duration in milliseconds
          close: true, // Show close button
          gravity: "top", // Display position: 'top', 'bottom', 'left', 'right'
          position: "center", // Alignment of position: 'left', 'right', 'center'
          backgroundColor: "green", // Background color
        }).showToast();
      },
    });
  };
</script>
<script>
  function handleDownloadInvoice() {
    // Your download invoice logic here
    console.log("1"); // Assuming your "Download Invoice" button has the class "btn-primary"
    let orderDetails = JSON.parse(
      document.getElementById("orderDetailsData").value
    );

    let userAddress = JSON.parse(
      document.getElementById("userAddressData").value
    );

    console.log("orderDetails : ", orderDetails);
    console.log("userAddress : ", userAddress);

    Swal.fire({
      title: "Do you want to download Invoice?",
      showCancelButton: true,
      confirmButtonText: "OK",
      cancelButtonText: "Cancel",
    }).then((result) => {
      if (result.isConfirmed) {
        console.log("1");

        let products = orderDetails.flatMap((order) => {
          const orderedItem = order.orderedItems;
          const matchingProduct = order.productDetails.find(
            (product) =>
              product._id.toString() === orderedItem.product.toString()
          );
          console.log("Matching Product:", matchingProduct);
          if (orderedItem.orderStat === "delivered") {
            return [
              {
                quantity: orderedItem.quantity,
                description: order.productDetails.find(
                  (product) =>
                    product._id.toString() === orderedItem.product.toString()
                ).productName,
                tax: 0,
                price: order.productDetails.find(
                  (product) =>
                    product._id.toString() === orderedItem.product.toString()
                ).salePrice,
              },
            ];
          } else {
            return [];
          }
        });
        console.log(products);
        const data = {
          apiKey: "free",
          mode: "development",
          documentTitle: "INVOICE Reid",
          currency: "INR",
          taxNotation: "GST",
          marginTop: 25,
          marginRight: 25,
          marginLeft: 25,
          marginBottom: 25,
          logo: "https://public.easyinvoice.cloud/img/logo_en_original.png",
          sender: {
            company: "ArmorHead",
            address: "Maradu,Kochi",
            zip: "1234 AB",
            city: "Kochi",
            country: "India",
          },
          client: {
            company: `${userAddress.firstName} ${userAddress.lastName}`,
            address: userAddress.house,
            zip: "5678 CD",
            city: userAddress.city,
            country: "India", // Assuming the country is India for all addresses
          },
          invoiceNumber: "2021.0001",
          invoiceDate: "12-03-2024",
          products: products,
          bottomNotice: "Thank you for your business.",
        };

        easyinvoice.createInvoice(data, function (result) {
          easyinvoice.download("ArmorHead-invoice.pdf", result.pdf);
        });
      }
    });
  }
</script>
