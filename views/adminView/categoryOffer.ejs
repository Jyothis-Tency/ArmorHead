<%- include("../partials/adminHeader") %>

<div class="content-header">
  <div>
    <h2 class="content-title card-title">Category Offer Management</h2>
  </div>
  <!-- <div style="float: right; margin-right: 10px;">
        <button style="background-color: green; color: white; border: none; padding: 10px 20px; cursor: pointer;">Add Offer</button>
    </div> -->
  <div>
    <button
      type="button"
      class="btn btn-primary"
      data-bs-toggle="modal"
      data-bs-target="#addCategoryOfferModal"
      data-bs-whatever="@getbootstrap"
    >
      Add Offer +
    </button>
  </div>
</div>

<div class="right mt-5">
  <table class="table table-striped">
    <thead>
      <tr>
        <th scope="col"><b>No</b></th>
        <th scope="col"><b>Offer Name</b></th>
        <th scope="col"><b>Category</b></th>
        <!-- <th scope="col"><b>Brand</b></th> -->
        <th scope="col"><b>Discount(%)</b></th>
        <th scope="col"><b>Starting Date</b></th>
        <th scope="col"><b>Ending Date</b></th>
        <th scope="col"><b>Delete</b></th>
        <th scope="col"><b>Edit</b></th>
      </tr>
    </thead>
    <tbody>
      <% for(let i=0; i < catoffers.length; i++) { %>
      <tr>
        <td><%= i + 1 %></td>
        <td><%= catoffers[i].name %></td>
        <td><%= catoffers[i].categoryOffer.category.name %></td>
        <td><%= catoffers[i].discount %> </td>
        <td><%= catoffers[i].startingDate.toLocaleDateString() %></td>
        <td><%= catoffers[i].endingDate.toLocaleDateString() %></td>
        <td width="10%">
          <a
            onclick="deleteOffer('<%= catoffers[i]._id %>')"
            class="btn btn-sm btn-danger rounded font-sm mt-15"
            >Delete</a
          >
        </td>
        <td>
          <button
            type="button"
            class="btn btn-primary edit-category-offer-btn"
            style="padding: 5px 10px; font-size: 12px"
            data-bs-toggle="modal"
            data-bs-target="#editCategoryOfferModal"
            data-offer-id="<%= catoffers[i]._id %>"
            data-offer-name="<%= catoffers[i].name %>"
            data-category-name="<%= catoffers[i].categoryOffer.category.name %>"
            data-discount="<%= catoffers[i].discount %>"
            data-starting-date="<%= catoffers[i].startingDate.toISOString().split('T')[0] %>"
            data-ending-date="<%= catoffers[i].endingDate.toISOString().split('T')[0] %>"
          >
            Edit Offer +
          </button>
        </td>
      </tr>
      <% } %>
    </tbody>
  </table>
</div>

<div
  class="modal fade"
  id="addCategoryOfferModal"
  tabindex="-1"
  aria-labelledby="exampleModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Add Category Offer</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <form
          action="/admin/add-catOffer"
          method="post"
          id="addCategoryOfferForm"
        >
          <div class="mb-3">
            <label for="offerName" class="col-form-label">Offer Name</label>
            <input
              type="text"
              class="form-control"
              name="name"
              id="offerName"
            />
            <div id="error1" class="text-danger"></div>
          </div>
          <div class="mb-3">
            <label for="category" class="col-form-label">Category</label>
            <select name="category" id="category" class="form-select" required>
              <% for( let i=0; i < categories.length; i++ ) { %>
              <option value="<%= categories[i]._id %>">
                <%= categories[i].name %>
              </option>
              <% } %>
            </select>
          </div>
          <div class="mb-3">
            <label for="discount" class="col-form-label">Discount %</label>
            <input
              type="number"
              class="form-control"
              name="discount"
              id="discount"
            />
            <div id="error2" class="text-danger"></div>
          </div>
          <div class="mb-3">
            <label for="startingDate" class="col-form-label"
              >Starting Date</label
            >
            <input
              type="date"
              class="form-control"
              name="startingDate"
              id="startingDate"
            />
            <div id="error3" class="text-danger"></div>
          </div>
          <div class="mb-3">
            <label for="endingDate" class="col-form-label">Ending Date</label>
            <input
              type="date"
              class="form-control"
              name="endingDate"
              id="endingDate"
            />
            <div id="error4" class="text-danger"></div>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Close
            </button>
            <button type="submit" class="btn btn-primary">
              Add Category Offer
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Edit Category Offer Modal -->
<div
  class="modal fade"
  id="editCategoryOfferModal"
  tabindex="-1"
  aria-labelledby="exampleModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Edit Category Offer</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <form
          action="/admin/edit-catOffer"
          method="post"
          id="editCategoryOfferForm"
        >
          <!-- Input fields to edit category offer -->
          <input type="hidden" name="offerId" id="editOfferId" />
          <div class="mb-3">
            <label for="editOfferName" class="col-form-label">Offer Name</label>
            <input
              type="text"
              class="form-control"
              name="name"
              id="editOfferName"
            />
            <div id="error1" class="text-danger"></div>
          </div>
          <div class="mb-3">
            <label for="editCategory" class="col-form-label">Category</label>
            <select
              name="category"
              id="editCategory"
              class="form-select"
              required
            >
              <% for( let i=0; i < categories.length; i++ ) { %>
              <option value="<%= categories[i]._id %>">
                <%= categories[i].name %>
              </option>
              <% } %>
            </select>
          </div>
          <div class="mb-3">
            <label for="editDiscount" class="col-form-label">Discount %</label>
            <input
              type="number"
              class="form-control"
              name="discount"
              id="editDiscount"
            />
            <div id="error2" class="text-danger"></div>
          </div>
          <div class="mb-3">
            <label for="editStartingDate" class="col-form-label"
              >Starting Date</label
            >
            <input
              type="date"
              class="form-control"
              name="startingDate"
              id="editStartingDate"
            />
            <div id="error3" class="text-danger"></div>
          </div>
          <div class="mb-3">
            <label for="editEndingDate" class="col-form-label"
              >Ending Date</label
            >
            <input
              type="date"
              class="form-control"
              name="endingDate"
              id="editEndingDate"
            />
            <div id="error4" class="text-danger"></div>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Close
            </button>
            <button type="submit" class="btn btn-primary">Update Offer</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<%- include("../partials/adminFooter") %>
<script>
  const today = new Date().toISOString().split("T")[0];
  const startingDate = document.getElementById("startingDate");
  const expiringDate = document.getElementById("expiringDate");
  const editStartingDate = document.getElementById("editStartingDate");
  const editExpiringDate = document.getElementById("editEndingDate");

  // Set the minimum date for both input fields to today's date
  startingDate.min = today;
  expiringDate.min = today;
  editStartingDate.min = today;
  editExpiringDate.min = today;

  // Add an event listener to the starting date input field
  startingDate.addEventListener("change", function () {
    // Set the minimum date for the expiring date input field to the selected starting date
    expiringDate.min = this.value;
    editExpiringDate.min = this.value;
  });
</script>

<script>
  // JavaScript to populate the edit modal fields with category offer details
  function populateEditCategoryModal(
    offerId,
    offerName,
    categoryName,
    discount,
    startDate,
    endDate
  ) {
    document.getElementById("editOfferId").value = offerId;
    document.getElementById("editOfferName").value = offerName;
    document.getElementById("editDiscount").value = discount;
    document.getElementById("editStartingDate").value = startDate;
    document.getElementById("editEndingDate").value = endDate;

    // Set the selected category in the dropdown
    var select = document.getElementById("editCategory");
    for (var i = 0; i < select.options.length; i++) {
      if (select.options[i].text === categoryName) {
        select.selectedIndex = i;
        break;
      }
    }

    // Show the edit modal
    var editModal = new bootstrap.Modal(
      document.getElementById("editCategoryOfferModal")
    );
    editModal.show();
  }

  // Add event listeners to all "Edit Category Offer" buttons
  document.querySelectorAll(".edit-category-offer-btn").forEach((button) => {
    button.addEventListener("click", function () {
      // Extract offer details from the data attributes of the button
      var offerId = this.getAttribute("data-offer-id");
      var offerName = this.getAttribute("data-offer-name");
      var categoryName = this.getAttribute("data-category-name");
      var discount = this.getAttribute("data-discount");
      var startDate = this.getAttribute("data-starting-date");
      var endDate = this.getAttribute("data-ending-date");

      // Populate the edit modal with category offer details
      populateEditCategoryModal(
        offerId,
        offerName,
        categoryName,
        discount,
        startDate,
        endDate
      );
    });
  });

  const addCategoryOfferForm = document.getElementById("addCategoryOfferForm");

  addCategoryOfferForm.addEventListener("submit", async (event) => {
    event.preventDefault();

    console.log("inside addcategoryoffer");
    const name = document.getElementById("offerName").value.trim();
    const category = document.getElementById("category").value;
    const discount = document.getElementById("discount").value;
    const startingDateInput = document.getElementById("startingDate");
    const startingDateValue = startingDateInput.value;
    const endingDateInput = document.getElementById("endingDate");
    const endingDateValue = endingDateInput.value;

    console.log(
      `${name} ${category} ${discount} ${startingDateValue} ${endingDateValue}`
    );

    // Reset error messages
    document.getElementById("error1").textContent = "";
    document.getElementById("error2").textContent = "";
    const startingDateError = startingDateInput.nextElementSibling;
    if (startingDateError) {
      startingDateError.textContent = "";
    }
    const endingDateError = endingDateInput.nextElementSibling;
    if (endingDateError) {
      endingDateError.textContent = "";
    }

    // Validate name (assuming this field is required)
    if (!name) {
      console.log("inside name validation");
      const nameInput = document.getElementById("offerName");
      const nameErrorContainer =
        nameInput.parentElement.querySelector("#error1");
      nameErrorContainer.textContent = "Please enter an offer name";
      return;
    }

    const discountRegex = /^\d+$/;
    if (!discount) {
      console.log("inside discount validation");
      const discountInput = document.getElementById("discount");
      const discountErrorContainer =
        discountInput.parentElement.querySelector("#error2");
      discountErrorContainer.textContent = "Please enter a discount amount";
      return;
    } else if (!discountRegex.test(discount)) {
      console.log("inside discount validation");
      const discountInput = document.getElementById("discount");
      const discountErrorContainer =
        discountInput.parentElement.querySelector("#error2");
      discountErrorContainer.textContent = "Discount should be a valid integer";
      return;
    }

    // Validate starting date
    const today = new Date().toISOString().split("T")[0];
    if (!startingDateValue) {
      console.log("inside startingDate validation");
      const startingDateErrorContainer =
        startingDateInput.parentElement.querySelector("#error3");
      startingDateErrorContainer.textContent = "Please select a starting date";
      return;
    } else if (startingDateValue < today) {
      console.log("inside start date validation");
      const startingDateErrorContainer =
        startingDateInput.parentElement.querySelector("#error3");
      startingDateErrorContainer.textContent =
        "Starting date cannot be earlier than today";
      return;
    }

    // Validate ending date
    if (!endingDateValue) {
      console.log("inside endingDate validation");
      const endingDateErrorContainer =
        endingDateInput.parentElement.querySelector("#error4");
      endingDateErrorContainer.textContent = "Please select an ending date";
      return;
    } else if (endingDateValue <= startingDateValue) {
      console.log("inside end date validation");
      const endingDateErrorContainer =
        endingDateInput.parentElement.querySelector("#error4");
      endingDateErrorContainer.textContent =
        "Ending date must be after the starting date";
      return;
    }
    // Convert date strings to MongoDB-compatible format
    let startingDate, endingDate;
    try {
      startingDate = new Date(startingDateValue);
      endingDate = new Date(endingDateValue);
    } catch (error) {
      console.error("Error converting dates:", error);
      return;
    }
    const formData = {
      name,
      category,
      discount,
      startingDate,
      endingDate,
    };

    try {
      const response = await fetch("/admin/add-catOffer", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });
      const data = await response.json();
      if (response.ok) {
        // Show success toast in the center
        Toastify({
          text: "Category offer added successfully",
          duration: 3000,
          gravity: "top",
          position: "center",
          style: {
            background: "green",
            color: "white",
          },
        }).showToast();

        // Delay redirection for 2 seconds
        setTimeout(() => {
          window.location.href = "/admin/categoryOffer";
        }, 2000);
      } else {
        // Handle error response
        Toastify({
          text:
            data.message || "An error occurred while adding the category offer",
          duration: 3000,
          gravity: "top",
          position: "center",
          style: {
            background: "red",
            color: "white",
          },
        }).showToast();
      }
    } catch (error) {
      // Handle network or other errors
      Toastify({
        text: "An error occurred while adding the category offer",
        duration: 3000,
        gravity: "top",
        position: "center",
        style: {
          background: "red",
          color: "white",
        },
      }).showToast();
      console.error("Error:", error);
    }
  });

  // Get the form element
  const editCategoryOfferForm = document.getElementById(
    "editCategoryOfferForm"
  );

  // Add an event listener to the form
  editCategoryOfferForm.addEventListener("submit", async (e) => {
    e.preventDefault(); // Prevent the default form submission

    // Get the form field values
    const offerId = document.getElementById("editOfferId").value;
    const name = document.getElementById("editOfferName").value;
    const category = document.getElementById("editCategory").value;
    const discount = document.getElementById("editDiscount").value;
    const startingDateValue = document.getElementById("editStartingDate").value;
    const endingDateValue = document.getElementById("editEndingDate").value;

    console.log(
      `${offerId} ${name} ${category} ${discount} ${startingDateValue} ${endingDateValue}`
    );

    // Reset error messages
    const nameErrorContainer = document.getElementById("error1");
    let discountErrorContainer = document.getElementById("error2");
    let startingDateErrorContainer = document.getElementById("error3");
    let endingDateErrorContainer = document.getElementById("error4");
    nameErrorContainer.textContent = "";
    discountErrorContainer.textContent = "";
    startingDateErrorContainer.textContent = "";
    endingDateErrorContainer.textContent = "";

    // Validate name (assuming this field is required)
    if (!name) {
      console.log("inside name validation");
      const nameInput = document.getElementById("editOfferName");
      const nameErrorContainer =
        nameInput.parentElement.querySelector("#error1");
      nameErrorContainer.textContent = "Please enter an offer name";
      return;
    }
    if (/\s/.test(name)) {
      console.log("inside name spaces validation");
      const nameInput = document.getElementById("editOfferName");
      const nameErrorContainer =
        nameInput.parentElement.querySelector("#error1");
      nameErrorContainer.textContent = "Offer name should not contain spaces";
      return;
    }
    // Validate discount (assuming this field is required)
    if (discount === null || discount === "") {
      console.log("inside discount validation");
      const discountInput = document.getElementById("editDiscount");
      discountErrorContainer =
        discountInput.parentElement.querySelector("#error2");
      discountErrorContainer.textContent = "Please enter a discount value";
      return;
    }
    if (discount < 0) {
      console.log("inside discount validation");
      const discountInput = document.getElementById("editDiscount");
      discountErrorContainer =
        discountInput.parentElement.querySelector("#error2");
      discountErrorContainer.textContent =
        "Discount value should not be a negative number";
      return;
    }
    const parsedDiscount = parseInt(discount);

    if (isNaN(parsedDiscount)) {
      console.log("inside discount validation");
      const discountInput = document.getElementById("editDiscount");
      discountErrorContainer =
        discountInput.parentElement.querySelector("#error2");
      discountErrorContainer.textContent = "Discount must be a valid integer";
      return;
    }

    if (!Number.isInteger(parsedDiscount)) {
      console.log("inside discount validation");
      const discountInput = document.getElementById("editDiscount");
      discountErrorContainer =
        discountInput.parentElement.querySelector("#error2");
      discountErrorContainer.textContent = "Discount must be a valid integer";
      return;
    }
    // Validate starting date (should not be left blank)
    if (!startingDateValue) {
      console.log("inside starting date validation (blank)");
      const startingDateInput = document.getElementById("editStartingDate");
      startingDateErrorContainer =
        startingDateInput.parentElement.querySelector("#error3");
      startingDateErrorContainer.textContent =
        "Starting date cannot be left blank";
      return;
    }

    // Validate starting date (should not be less than today)
    const currentDate = new Date().toISOString().split("T")[0]; // Get the current date
    if (startingDateValue < currentDate) {
      console.log("inside starting date validation (less than today)");
      const startingDateInput = document.getElementById("editStartingDate");
      startingDateErrorContainer =
        startingDateInput.parentElement.querySelector("#error3");
      startingDateErrorContainer.textContent =
        "Starting date should not be less than today";
      return;
    }

    // Validate ending date (should not be null)
    if (!endingDateValue) {
      console.log("inside ending date validation (null)");
      const endingDateInput = document.getElementById("editEndingDate");
      endingDateErrorContainer =
        endingDateInput.parentElement.querySelector("#error4");
      endingDateErrorContainer.textContent = "Ending date cannot be left blank";
      return;
    }

    // Validate ending date (should not be less than starting date)
    if (endingDateValue < startingDateValue) {
      console.log("inside ending date validation (less than starting date)");
      const endingDateInput = document.getElementById("editEndingDate");
      endingDateErrorContainer =
        endingDateInput.parentElement.querySelector("#error4");
      endingDateErrorContainer.textContent =
        "Ending date should not be less than starting date";
      return;
    }

    // // Convert date strings to MongoDB-compatible format
    let startingDate, endingDate;
    try {
      startingDate = new Date(startingDateValue);
      endingDate = new Date(endingDateValue);
    } catch (error) {
      console.error("Error converting dates:", error);
      return;
    }

    // Create an object with the form data
    const formData = {
      offerId,
      name,
      category,
      discount,
      startingDate,
      endingDate,
    };

    try {
      // Send the AJAX request
      const response = await fetch("/admin/edit-catOffer", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      // Check if the response is successful
      if (response.ok) {
        const data = await response.json();
        // Show success toast in the center
        Toastify({
          text: "Category offer updated successfully",
          duration: 3000,
          gravity: "top",
          position: "center",
          style: {
            background: "green",
            color: "white",
          },
        }).showToast();

        // Delay redirection for 2 seconds
        setTimeout(() => {
          window.location.href = "/admin/categoryOffer";
        }, 2000);
      } else {
        const data = {}; // Define data variable with an empty object
        // Handle error response
        Toastify({
          text:
            data.message ||
            "An error occurred while updating the category offer",
          duration: 3000,
          gravity: "top",
          position: "center",
          style: {
            background: "red",
            color: "white",
          },
        }).showToast();
      }
    } catch (error) {
      // Handle network or other errors
      Toastify({
        text: "An error occurred while updating the category offer",
        duration: 3000,
        gravity: "top",
        position: "center",
        style: {
          background: "red",
          color: "white",
        },
      }).showToast();
      console.error("Error:", error);
    }
  });

  function deleteOffer(offerId) {
    console.log("clicked", offerId);
    Swal.fire({
      title: "Are you sure you want to delete this offer?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, delete it!",
      cancelButtonText: "No, cancel",
    }).then((result) => {
      if (result.isConfirmed) {
        $.ajax({
          url: "/admin/delete-catOffer/" + offerId,
          type: "post",
        })
          .done((res) => {
            if (res) {
              Swal.fire(
                "Successful",
                "Offer deleted successfully",
                "success"
              ).then(() => {
                location.reload();
              });
            }
          })
          .fail((error) => {
            console.log(error);
          });
      }
    });
  }
</script>
