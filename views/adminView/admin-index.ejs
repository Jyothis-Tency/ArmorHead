<%- include("../partials/adminHeader") %>


<section class="content-main">
    <div class="content-header">
      <div>
        <h2 class="content-title card-title">Dashboard </h2>
        <p>Whole data about your business here</p>
      </div>

    </div>

    <div class="row">
        <div class="col-lg-4">
          <div class="card card-body mb-4">
            <article class="icontext">
              <span class="icon icon-sm rounded-circle bg-primary-light"><i
                  class="text-primary material-icons md-monetization_on"></i></span>
                  <div class="text">
                    <h6 class="mb-1 card-title">Revenue</h6>
                    <% let totalRevenue = 0; %>
                    <% for (let i = 0; i < salesDetails.length; i++) { %>
                      <% if (salesDetails[i].orderStatus === 'delivered') { %>
                        <% totalRevenue += salesDetails[i].totalAmount %>
                      <% } %>
                    <% } %>
                    <span id="totalRevenue" style="font-size: 18px;">â‚¹ <%= totalRevenue %></span>
                    <span class="text-sm">Shipping fees are not included</span>
                  </div>
            </article>
          </div>
        </div>
        <div class="col-lg-4">
          <div class="card card-body mb-4">
            <article class="icontext">
              <span class="icon icon-sm rounded-circle bg-success-light"><i
                  class="text-success material-icons md-local_shipping"></i></span>
              <div class="text">
                <h6 class="mb-1 card-title">Delivered</h6> 
                <% let deliveredOrdersCount = 0; %>
                <% for (let i = 0; i < salesDetails.length; i++) { %>
                  <% if (salesDetails[i].orderStatus === 'delivered') { %>
                    <% deliveredOrdersCount++; %>
                  <% } %>
                <% } %>
                <span><%= deliveredOrdersCount %></span>
                <span class="text-sm">
                  Excluding orders in transit
                </span>
              </div>
            </article>
          </div>
        </div>
        <div class="col-lg-4">
          <div class="card card-body mb-4">
            <article class="icontext">
              <span class="icon icon-sm rounded-circle bg-warning-light"><i
                  class="text-warning material-icons md-qr_code"></i></span>
              <div class="text">
                <h6 class="mb-1 card-title">Products</h6> <span>
                  <%= products.length %>
                </span>
                <span class="text-sm">
                  In <%= categories.length %> Categories
                </span>
              </div>
            </article>
          </div>
        </div>
      </div>
      
      <div class="row">
        <div class="col-lg-8">
          <div class="card mb-4">
            <article class="card-body">
              <h5 class="card-title">Monthly Sales Statistics</h5>
              <canvas id="monthlyChart" height="120px"></canvas>
            </article>
          </div>
        </div>
        <!-- <div class="col-lg-4">
          <div class="card mb-4">
            <article class="card-body">
              <h5 class="card-title">Order Statuses</h5>
              <input type="hidden" id="orderStatus">
              <canvas id="myChart2" height="217"></canvas>
            </article>
          </div>
        </div> -->
      </div>
      
      <div class="row">
        <div class="col-lg-8">
          <div class="card mb-4">
            <article class="card-body">
              <h5 class="card-title">Daily Sales Statistics</h5>
              <canvas id="dailyChart" height="120px"></canvas>
            </article>
          </div>
        </div>
        <div class="col-lg-4">
          <div class="card mb-4">
            <article class="icontext">
              <div class="p-3">
                <h3 class="mb-4 card-title text-center">Best Selling Categories</h3> <!-- Center align the title -->
                <% for(let i=0; i < topSellingCategories.length; i++) { %>
                  <div class="category-item mb-2 text-center"> <!-- Center align the category name -->
                    <%= topSellingCategories[i].name %>
                  </div>
                  <% } %>
              </div>
            </article>
          </div>
        </div>
      </div>
      
      <div class="row">
        <div class="col-lg-8">
          <div class="card mb-4">
            <article class="card-body">
              <h5 class="card-title">Yearly Sales Statistics</h5>
              <canvas id="yearlyChart" height="120px"></canvas>
            </article>
          </div>
        </div>
        <!-- <div class="col-lg-4">
          <div class="card mb-4">
            <article class="icontext">
              <div class="p-3">
                <h3 class="mb-4 card-title text-center">Best Selling Brands</h3> 
              
                  <div class="category-item mb-2 text-center"> 
                    Pepe Jeans
                  </div>
                 
              </div>
            </article>
          </div>
        </div> -->
      </div>


    <div>
      <h1 class="text-center mb-4">Best Selling Products</h1>
      <table class="table" id="bestSellingProducts">
        <thead>
          <tr>
            <th class="text-center">Product Image</th>
            <th class="text-center">Product Name</th>
            <th class="text-center">Total Quantity</th>
          </tr>
        </thead>
        <tbody>
          <% const sortedProducts=productsData.sort((a, b)=> {
            // Find the totalQuantity of each product in topSellingProducts
            const quantityA = topSellingProducts.find(product => product._id.toString() ===
            a._id.toString())?.totalQuantity || 0;
            const quantityB = topSellingProducts.find(product => product._id.toString() ===
            b._id.toString())?.totalQuantity || 0;
            // Sort in descending order of totalQuantity
            return quantityB - quantityA;
            });

            // Render sorted products
            sortedProducts.forEach(product => { %>
            <tr>
              <td class="text-center"><img src="/uploads/product-images/<%= product.productImage[0] %>" alt="<%= product.productName %>"
                  style="max-width: 70px; max-height: 70px;"></td>
              <td class="text-center" style="vertical-align: middle; ">
                <%= product.productName %>
              </td>
              <td class="text-center"  style="vertical-align: middle; ">
                <%= topSellingProducts.find(topProduct=> topProduct._id.toString() ===
                  product._id.toString())?.totalQuantity || 0 %>
              </td>
            </tr>
            <% }); %>
        </tbody>
      </table>
    </div>

  </section>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<%- include("../partials/adminFooter") %>

<script>
    window.onload = function () {
      fetch('/admin/showChart', {
        method: 'post',
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ msg: "hi" })
      })
        .then(response => response.json())
        .then(data => {
          if (data.monthlySalesData && data.dailySalesData && data.eachOrderStatusCount && data.yearlySalesData) {
            console.log("data.monthlySalesData : ",data.monthlySalesData);
            console.log("data.dailySalesData : ",data.dailySalesData);
            console.log("data.eachOrderStatusCount : ",data.eachOrderStatusCount);
            console.log("data.yearlySalesData : ",data.yearlySalesData);

            // Call the chart function for line charts
            chart(data.monthlySalesData, data.dailySalesData, data.yearlySalesData);

            // Call a separate function for the pie chart
            pieChart(data.eachOrderStatusCount);
          }
        })
        .catch(error => {
          console.error('Error fetching data:', error);
        });
    }

    function chart(monthlySalesData, dailySalesData, yearlySalesData) {
      // Fill in missing months with zero values
      console.log(monthlySalesData);
      console.log(dailySalesData);
      console.log(yearlySalesData);
      const allMonths = Array.from({ length: 12 }, (_, i) => i + 1); // Array representing all months (1 to 12)
      const monthlyDataMap = new Map(monthlySalesData.map(item => [item._id, item.totalAmount]));
      const monthlyDataFilled = allMonths.map(month => ({ _id: month, totalAmount: monthlyDataMap.get(month) || 0 }));

      // Monthly sales chart
      if ($('#monthlyChart').length) {
        var monthlyCtx = document.getElementById('monthlyChart').getContext('2d');
        var monthlyChart = new Chart(monthlyCtx, {
          type: 'line',
          data: {
            labels: monthlyDataFilled.map(item => item._id),
            datasets: [{
              label: 'Monthly Sales',
              backgroundColor: 'rgba(44, 120, 220, 0.2)',
              borderColor: 'rgba(44, 120, 220)',
              data: monthlyDataFilled.map(item => item.totalAmount)
            }]
          },
          options: {
            plugins: {
              legend: {
                labels: {
                  usePointStyle: true,
                },
              }
            }
          }
        });
      }

      // Daily sales chart
      if ($('#dailyChart').length) {
        var dailyCtx = document.getElementById('dailyChart').getContext('2d');
        var dailyChart = new Chart(dailyCtx, {
          type: 'line',
          data: {
            labels: dailySalesData.map(item => item._id),
            datasets: [{
              label: 'Daily Sales',
              backgroundColor: 'rgba(44, 120, 220, 0.2)',
              borderColor: 'rgba(44, 120, 220)',
              data: dailySalesData.map(item => item.totalAmount)
            }]
          },
          options: {
            plugins: {
              legend: {
                labels: {
                  usePointStyle: true,
                },
              }
            }
          }
        });
      }

      // Yearly sales chart
  if ($('#yearlyChart').length) {
    var yearlyCtx = document.getElementById('yearlyChart').getContext('2d');
    var yearlyChart = new Chart(yearlyCtx, {
      type: 'line',
      data: {
        labels: yearlySalesData.map(item => item._id),
        datasets: [{
          label: 'Yearly Sales',
          backgroundColor: 'rgba(44, 120, 220, 0.2)',
          borderColor: 'rgba(44, 120, 220)',
          data: yearlySalesData.map(item => item.totalAmount)
        }]
      },
      options: {
        plugins: {
          legend: {
            labels: {
              usePointStyle: true,
            },
          }
        }
      }
    });
  }
    }

    function pieChart(eachOrderStatusCount) {
      if ($('#myChart2').length) {
        var statusLabels = Object.keys(eachOrderStatusCount);
        var statusData = Object.values(eachOrderStatusCount);

        var ctx = document.getElementById('myChart2').getContext('2d');
        var myChart2 = new Chart(ctx, {
          type: 'pie',
          data: {
            labels: statusLabels,
            datasets: [{
              data: statusData,
              backgroundColor: [
                'rgba(255, 99, 132, 0.7)',
                'rgba(54, 162, 235, 0.7)',
                'rgba(255, 206, 86, 0.7)',
                'rgba(75, 192, 192, 0.7)',
                'rgba(153, 102, 255, 0.7)',
                'rgba(255, 159, 64, 0.7)'
              ],
              borderColor: [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
              ],
              borderWidth: 1
            }]
          },
          options: {
            plugins: {
              legend: {
                display: true,
                position: 'right'
              }
            }
          }
        });
      }
    }


</script>